{"version":3,"file":"index.umd.min.js","sources":["../src/actions/SortAction.ts","../src/actions/FetchSelectorAction.ts","../src/utils.ts","../src/index.ts"],"sourcesContent":["import type { ISortAction, IUmbracoContentDeliveryApi } from '../../interfaces';\r\n\r\nexport class SortAction implements ISortAction {\r\n  private baseQuery: IUmbracoContentDeliveryApi;\r\n  private field: string;\r\n\r\n  constructor(baseQuery: IUmbracoContentDeliveryApi, field: string) {\r\n    this.baseQuery = baseQuery;\r\n    this.field = field;\r\n  }\r\n\r\n  ascending(): IUmbracoContentDeliveryApi {\r\n    this.baseQuery.addSort(this.field, 'asc');\r\n    return this.baseQuery;\r\n  }\r\n\r\n  descending(): IUmbracoContentDeliveryApi {\r\n    this.baseQuery.addSort(this.field, 'desc');\r\n    return this.baseQuery;\r\n  }\r\n}\r\n","import type { IUmbracoContentDeliveryApi } from '../../interfaces/IUmbracoContentDeliveryApi';\r\nimport type { IFetchSelectorAction } from '../../interfaces/IFetchSelectorAction';\r\n\r\nexport class FetchSelectorAction implements IFetchSelectorAction {\r\n  private selector: 'ancestors' | 'children' | 'descendants';\r\n  private baseQuery: IUmbracoContentDeliveryApi;\r\n\r\n  constructor(\r\n    baseQuery: IUmbracoContentDeliveryApi,\r\n    selector: 'ancestors' | 'children' | 'descendants'\r\n  ) {\r\n    this.baseQuery = baseQuery;\r\n    this.selector = selector;\r\n  }\r\n\r\n  byId(id: string): IUmbracoContentDeliveryApi {\r\n    // if ID is not a guid, throw error\r\n    if (!id.match(/^[a-f\\d]{8}(-[a-f\\d]{4}){4}[a-f\\d]{8}$/i)) {\r\n      throw new Error('ID must be a guid');\r\n    }\r\n    this.baseQuery.addFetch(this.selector, id);\r\n    return this.baseQuery;\r\n  }\r\n\r\n  byPath(path: string): IUmbracoContentDeliveryApi {\r\n    // check path is not a guid\r\n    if (path.match(/^[a-f\\d]{8}(-[a-f\\d]{4}){4}[a-f\\d]{8}$/i)) {\r\n      throw new Error('Path cannot be a guid');\r\n    }\r\n    // if path starts with a / remove it\r\n    if (path.startsWith('/')) {\r\n      path = path.slice(1);\r\n    }\r\n    this.baseQuery.addFetch(this.selector, path);\r\n    return this.baseQuery;\r\n  }\r\n}\r\n","export function toQueryString(queryParams: { [key: string]: string | string[] } = {}) {\r\n    const parts: string[] = [];\r\n    for (const key in queryParams) {\r\n      if (Array.isArray(queryParams[key])) {\r\n        parts.push(\r\n          ...(queryParams[key] as string[]).map((value) => `${key}=${value}`),\r\n        );\r\n      } else if (queryParams[key] !== undefined) {\r\n        parts.push(`${key}=${queryParams[key]}`);\r\n      }\r\n    }\r\n    return parts.length ? `?${parts.join('&')}` : '';\r\n  }","import axios from 'axios';\n\nimport type { IUmbracoContentDeliveryApi, IUmbracoContentDeliveryApiItem, IFetchSelectorAction, ISortAction } from '../interfaces/';\nimport { SortAction, FetchSelectorAction } from './actions';\nimport { toQueryString } from './utils';\n\n\nexport class UmbracoContentDeliveryApi implements IUmbracoContentDeliveryApi {\n  public baseURL: string;\n  public endpoint: string;\n  public queryParams: any;\n\n  constructor(baseURL: string, endpoint: string | null = null) {\n    this.baseURL = baseURL;\n    this.endpoint = endpoint ?? '/umbraco/delivery/api/v1/content';\n    this.queryParams = {};\n  }\n\n  fetch(\n    selector: 'ancestors' | 'children' | 'descendants',\n  ): IFetchSelectorAction {\n    return new FetchSelectorAction(this, selector);\n  }\n\n  addFetch(\n    selector: 'ancestors' | 'children' | 'descendants',\n    id: string,\n  ): IUmbracoContentDeliveryApi {\n    this.queryParams.fetch = `${selector}:${id}`;\n    return this;\n  }\n\n  //================================================================================================\n  // FILTERING\n  //================================================================================================\n  withContentType(value: string): IUmbracoContentDeliveryApi {\n    return this.addFilter('contentType', value, false);\n  }\n\n  withName(name: string): IUmbracoContentDeliveryApi {\n    return this.addFilter('name', name, false);\n  }\n\n  withoutContentType(value: string): IUmbracoContentDeliveryApi {\n    return this.addFilter('contentType', value, true);\n  }\n\n  withoutName(name: string): IUmbracoContentDeliveryApi {\n    return this.addFilter('name', name, true);\n  }\n\n  addFilter(\n    type: 'contentType' | 'name',\n    value: string,\n    negate: boolean,\n  ): IUmbracoContentDeliveryApi {\n    const filterValue = negate ? `!${value}` : value;\n    this.queryParams.filter = this.queryParams.filter\n      ? [...this.queryParams.filter, `${type}:${filterValue}`]\n      : [`${type}:${filterValue}`];\n    return this;\n  }\n\n  //================================================================================================\n  // SORTING\n  //================================================================================================\n  sortByName(): ISortAction {\n    return new SortAction(this, 'name');\n  }\n\n  sortByCreateDate(): ISortAction {\n    return new SortAction(this, 'createDate');\n  }\n\n  sortByLevel(): ISortAction {\n    return new SortAction(this, 'level');\n  }\n\n  sortBySortOrder(): ISortAction {\n    return new SortAction(this, 'sortOrder');\n  }\n\n  sortByUpdateDate(): ISortAction {\n    return new SortAction(this, 'updateDate');\n  }\n\n  addSort(field: string, order: 'asc' | 'desc'): IUmbracoContentDeliveryApi {\n    this.queryParams.sort = this.queryParams.sort\n      ? [...this.queryParams.sort, `${field}:${order}`]\n      : [`${field}:${order}`];\n    return this;\n  }\n\n  //================================================================================================\n  // PAGING\n  //================================================================================================\n  skip(count: number): IUmbracoContentDeliveryApi {\n    this.queryParams.skip = count;\n    return this;\n  }\n\n  take(count: number): IUmbracoContentDeliveryApi {\n    this.queryParams.take = count;\n    return this;\n  }\n\n  //================================================================================================\n  // EXPANDING\n  //================================================================================================\n  expandProperty(...propertyAliases: string[]): IUmbracoContentDeliveryApi {\n    this.queryParams.expand = `property:${propertyAliases.join(',')}`;\n    return this;\n  }\n  expandAll(): IUmbracoContentDeliveryApi {\n    this.queryParams.expand = 'all';\n    return this;\n  }\n\n  item(): IUmbracoContentDeliveryApiItem {\n    return new UmbracoContentDeliveryApiItem(this.baseURL, this.endpoint);\n  }\n\n  get() {\n    const url = `${this.baseURL}${this.endpoint}${toQueryString(\n      this.queryParams,\n    )}`;\n    return axios\n      .get(url)\n      .then((response) => response.data)\n      .catch((error) => error);\n  }\n\n  /**\n   * Returns the query string representation of the current set of query parameters.\n   * @returns A string representing the query parameters.\n   */\n  getQueryString(): string {\n    return toQueryString(this.queryParams);\n  }\n}\n\nexport class UmbracoContentDeliveryApiItem\n  implements IUmbracoContentDeliveryApiItem {\n  private baseURL: string;\n  private endpoint: string;\n  private queryParams: any;\n\n  constructor(baseURL: string, endpoint: string | null = null) {\n    this.baseURL = baseURL;\n    this.endpoint = endpoint ?? '/umbraco/delivery/api/v1/content';\n    this.queryParams = {};\n  }\n\n  expandProperty(...propertyAliases: string[]): IUmbracoContentDeliveryApiItem {\n    this.queryParams.expand = `property:${propertyAliases.join(',')}`;\n    return this;\n  }\n  expandAll(): IUmbracoContentDeliveryApiItem {\n    this.queryParams.expand = 'all';\n    return this;\n  }\n\n  byId(...id: string[]): IUmbracoContentDeliveryApiItem {\n    this.endpoint = `/umbraco/delivery/api/v1/content/item/${id}`;\n    return this as unknown as IUmbracoContentDeliveryApiItem;\n  }\n\n  byPath(path: string): IUmbracoContentDeliveryApiItem {\n    if (path.match(/^[a-f\\d]{8}(-[a-f\\d]{4}){4}[a-f\\d]{8}$/i)) {\n      throw new Error('Path cannot be a guid');\n    }\n    this.endpoint = `/umbraco/delivery/api/v1/content/item/${path}`;\n    return this as unknown as IUmbracoContentDeliveryApiItem;\n  }\n\n  get() {\n    const url = `${this.baseURL}${this.endpoint}${toQueryString(\n      this.queryParams,\n    )}`;\n    return axios\n      .get(url)\n      .then((response) => response.data)\n      .catch((error) => error);\n  }\n\n  getURL() {\n    return `${this.baseURL}${this.endpoint}${toQueryString(this.queryParams)}`;\n  }\n}\n"],"names":["SortAction","baseQuery","field","this","prototype","ascending","addSort","descending","FetchSelectorAction","selector","byId","id","match","Error","addFetch","byPath","path","startsWith","slice","toQueryString","queryParams","parts","key","Array","isArray","push","apply","map","value","concat","undefined","length","join","UmbracoContentDeliveryApi","baseURL","endpoint","fetch","withContentType","addFilter","withName","name","withoutContentType","withoutName","type","negate","filterValue","filter","__spreadArray","sortByName","sortByCreateDate","sortByLevel","sortBySortOrder","sortByUpdateDate","order","sort","skip","count","take","expandProperty","propertyAliases","_i","arguments","expand","expandAll","item","UmbracoContentDeliveryApiItem","get","url","axios","then","response","data","catch","error","getQueryString","getURL"],"mappings":"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"}