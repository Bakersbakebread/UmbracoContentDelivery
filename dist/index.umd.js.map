{"version":3,"file":"index.umd.js","sources":["../src/actions/SortAction.ts","../src/actions/FetchSelectorAction.ts","../src/utils.ts","../src/index.ts"],"sourcesContent":["import type { ISortAction, IUmbracoContentDeliveryApi } from '../../interfaces';\r\n\r\nexport class SortAction implements ISortAction {\r\n  private baseQuery: IUmbracoContentDeliveryApi;\r\n  private field: string;\r\n\r\n  constructor(baseQuery: IUmbracoContentDeliveryApi, field: string) {\r\n    this.baseQuery = baseQuery;\r\n    this.field = field;\r\n  }\r\n\r\n  ascending(): IUmbracoContentDeliveryApi {\r\n    this.baseQuery.addSort(this.field, 'asc');\r\n    return this.baseQuery;\r\n  }\r\n\r\n  descending(): IUmbracoContentDeliveryApi {\r\n    this.baseQuery.addSort(this.field, 'desc');\r\n    return this.baseQuery;\r\n  }\r\n}\r\n","import type { IUmbracoContentDeliveryApi } from '../../interfaces/IUmbracoContentDeliveryApi';\r\nimport type { IFetchSelectorAction } from '../../interfaces/IFetchSelectorAction';\r\n\r\nexport class FetchSelectorAction implements IFetchSelectorAction {\r\n  private selector: 'ancestors' | 'children' | 'descendants';\r\n  private baseQuery: IUmbracoContentDeliveryApi;\r\n\r\n  constructor(\r\n    baseQuery: IUmbracoContentDeliveryApi,\r\n    selector: 'ancestors' | 'children' | 'descendants'\r\n  ) {\r\n    this.baseQuery = baseQuery;\r\n    this.selector = selector;\r\n  }\r\n\r\n  byId(id: string): IUmbracoContentDeliveryApi {\r\n    // if ID is not a guid, throw error\r\n    if (!id.match(/^[a-f\\d]{8}(-[a-f\\d]{4}){4}[a-f\\d]{8}$/i)) {\r\n      throw new Error('ID must be a guid');\r\n    }\r\n    this.baseQuery.addFetch(this.selector, id);\r\n    return this.baseQuery;\r\n  }\r\n\r\n  byPath(path: string): IUmbracoContentDeliveryApi {\r\n    // check path is not a guid\r\n    if (path.match(/^[a-f\\d]{8}(-[a-f\\d]{4}){4}[a-f\\d]{8}$/i)) {\r\n      throw new Error('Path cannot be a guid');\r\n    }\r\n    // if path starts with a / remove it\r\n    if (path.startsWith('/')) {\r\n      path = path.slice(1);\r\n    }\r\n    this.baseQuery.addFetch(this.selector, path);\r\n    return this.baseQuery;\r\n  }\r\n}\r\n","export function toQueryString(queryParams: { [key: string]: string | string[] } = {}) {\r\n    const parts: string[] = [];\r\n    for (const key in queryParams) {\r\n      if (Array.isArray(queryParams[key])) {\r\n        parts.push(\r\n          ...(queryParams[key] as string[]).map((value) => `${key}=${value}`),\r\n        );\r\n      } else if (queryParams[key] !== undefined) {\r\n        parts.push(`${key}=${queryParams[key]}`);\r\n      }\r\n    }\r\n    return parts.length ? `?${parts.join('&')}` : '';\r\n  }","import axios from 'axios';\n\nimport type { IUmbracoContentDeliveryApi, IUmbracoContentDeliveryApiItem, IFetchSelectorAction, ISortAction } from '../interfaces/';\nimport { SortAction, FetchSelectorAction } from './actions';\nimport { toQueryString } from './utils';\n\n\nexport class UmbracoContentDeliveryApi implements IUmbracoContentDeliveryApi {\n  public baseURL: string;\n  public endpoint: string;\n  public queryParams: any;\n\n  constructor(baseURL: string, endpoint: string | null = null) {\n    this.baseURL = baseURL;\n    this.endpoint = endpoint ?? '/umbraco/delivery/api/v1/content';\n    this.queryParams = {};\n  }\n\n  fetch(\n    selector: 'ancestors' | 'children' | 'descendants',\n  ): IFetchSelectorAction {\n    return new FetchSelectorAction(this, selector);\n  }\n\n  addFetch(\n    selector: 'ancestors' | 'children' | 'descendants',\n    id: string,\n  ): IUmbracoContentDeliveryApi {\n    this.queryParams.fetch = `${selector}:${id}`;\n    return this;\n  }\n\n  //================================================================================================\n  // FILTERING\n  //================================================================================================\n  withContentType(value: string): IUmbracoContentDeliveryApi {\n    return this.addFilter('contentType', value, false);\n  }\n\n  withName(name: string): IUmbracoContentDeliveryApi {\n    return this.addFilter('name', name, false);\n  }\n\n  withoutContentType(value: string): IUmbracoContentDeliveryApi {\n    return this.addFilter('contentType', value, true);\n  }\n\n  withoutName(name: string): IUmbracoContentDeliveryApi {\n    return this.addFilter('name', name, true);\n  }\n\n  addFilter(\n    type: 'contentType' | 'name',\n    value: string,\n    negate: boolean,\n  ): IUmbracoContentDeliveryApi {\n    const filterValue = negate ? `!${value}` : value;\n    this.queryParams.filter = this.queryParams.filter\n      ? [...this.queryParams.filter, `${type}:${filterValue}`]\n      : [`${type}:${filterValue}`];\n    return this;\n  }\n\n  //================================================================================================\n  // SORTING\n  //================================================================================================\n  sortByName(): ISortAction {\n    return new SortAction(this, 'name');\n  }\n\n  sortByCreateDate(): ISortAction {\n    return new SortAction(this, 'createDate');\n  }\n\n  sortByLevel(): ISortAction {\n    return new SortAction(this, 'level');\n  }\n\n  sortBySortOrder(): ISortAction {\n    return new SortAction(this, 'sortOrder');\n  }\n\n  sortByUpdateDate(): ISortAction {\n    return new SortAction(this, 'updateDate');\n  }\n\n  addSort(field: string, order: 'asc' | 'desc'): IUmbracoContentDeliveryApi {\n    this.queryParams.sort = this.queryParams.sort\n      ? [...this.queryParams.sort, `${field}:${order}`]\n      : [`${field}:${order}`];\n    return this;\n  }\n\n  //================================================================================================\n  // PAGING\n  //================================================================================================\n  skip(count: number): IUmbracoContentDeliveryApi {\n    this.queryParams.skip = count;\n    return this;\n  }\n\n  take(count: number): IUmbracoContentDeliveryApi {\n    this.queryParams.take = count;\n    return this;\n  }\n\n  //================================================================================================\n  // EXPANDING\n  //================================================================================================\n  expandProperty(...propertyAliases: string[]): IUmbracoContentDeliveryApi {\n    this.queryParams.expand = `property:${propertyAliases.join(',')}`;\n    return this;\n  }\n  expandAll(): IUmbracoContentDeliveryApi {\n    this.queryParams.expand = 'all';\n    return this;\n  }\n\n  item(): IUmbracoContentDeliveryApiItem {\n    return new UmbracoContentDeliveryApiItem(this.baseURL, this.endpoint);\n  }\n\n  get() {\n    const url = `${this.baseURL}${this.endpoint}${toQueryString(\n      this.queryParams,\n    )}`;\n    return axios\n      .get(url)\n      .then((response) => response.data)\n      .catch((error) => error);\n  }\n\n  /**\n   * Returns the query string representation of the current set of query parameters.\n   * @returns A string representing the query parameters.\n   */\n  getQueryString(): string {\n    return toQueryString(this.queryParams);\n  }\n}\n\nexport class UmbracoContentDeliveryApiItem\n  implements IUmbracoContentDeliveryApiItem {\n  private baseURL: string;\n  private endpoint: string;\n  private queryParams: any;\n\n  constructor(baseURL: string, endpoint: string | null = null) {\n    this.baseURL = baseURL;\n    this.endpoint = endpoint ?? '/umbraco/delivery/api/v1/content';\n    this.queryParams = {};\n  }\n\n  expandProperty(...propertyAliases: string[]): IUmbracoContentDeliveryApiItem {\n    this.queryParams.expand = `property:${propertyAliases.join(',')}`;\n    return this;\n  }\n  expandAll(): IUmbracoContentDeliveryApiItem {\n    this.queryParams.expand = 'all';\n    return this;\n  }\n\n  byId(...id: string[]): IUmbracoContentDeliveryApiItem {\n    this.endpoint = `/umbraco/delivery/api/v1/content/item/${id}`;\n    return this as unknown as IUmbracoContentDeliveryApiItem;\n  }\n\n  byPath(path: string): IUmbracoContentDeliveryApiItem {\n    if (path.match(/^[a-f\\d]{8}(-[a-f\\d]{4}){4}[a-f\\d]{8}$/i)) {\n      throw new Error('Path cannot be a guid');\n    }\n    this.endpoint = `/umbraco/delivery/api/v1/content/item/${path}`;\n    return this as unknown as IUmbracoContentDeliveryApiItem;\n  }\n\n  get() {\n    const url = `${this.baseURL}${this.endpoint}${toQueryString(\n      this.queryParams,\n    )}`;\n    return axios\n      .get(url)\n      .then((response) => response.data)\n      .catch((error) => error);\n  }\n\n  getURL() {\n    return `${this.baseURL}${this.endpoint}${toQueryString(this.queryParams)}`;\n  }\n}\n"],"names":[],"mappings":"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"}